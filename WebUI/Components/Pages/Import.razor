@page "/import"
@using System.Globalization
@using MudBlazor
@using WebUI.Models
@using WebUI.Services
@using WebUI.Services.Interfaces
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ISnackbar Snackbar
@inject IPlanningLoaderService PlanningLoaderService
@inject IAthleteSession AthleteSession
@inject IPlanningBuilder PlanningBuilder
@rendermode InteractiveServer

<PageTitle>Import</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-6" >
    <MudText Typo="Typo.h3" Color="Color.Primary" Class="page-title mb-3"> Import</MudText>

    <MudPaper Class="p-4">
        <MudStack Spacing="3">
            <MudText Typo="Typo.subtitle1">1) Select start date</MudText>
            <MudDatePicker Label="Start date"
                           @bind-Date="_startDateTime"
                           DateFormat="dd/MM/yyyy"
                           CloseToEdges="true"
                           OpenTo="OpenTo.Date"
                           Variant="Variant.Outlined"
                           PickerVariant="PickerVariant.Static"
                           DisableToolbar="true"
                           onchange="OnDatePickerClosed" />

            @if (_startDateTime is not null)
            {
                <MudAlert Severity="Severity.Info" Dense="true">
                    Start date: @(_startDateTime!.Value.ToString("D", CultureInfo.CurrentCulture))
                </MudAlert>
            }

            <MudDivider Class="my-2" />

            <MudText Typo="Typo.subtitle1">2) Import CSV planning</MudText>

            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <InputFile OnChange="LoadFile" accept=".csv" />
                <MudText Typo="Typo.caption" Class="text-muted">Accepted: .csv</MudText>
            </MudStack>

            @if (_isLoading)
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-2" />
            }

            @if (_lastImportSummary is not null)
            {
                <MudAlert Severity="Severity.Success" Class="mt-2">
                    @_lastImportSummary
                </MudAlert>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private DateTime? _startDateTime;
    private bool _isLoading;
    private string? _lastImportSummary;
    private Athlete? _athlete;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load previously saved start date if present
            var stored = await localStorage.GetItemAsync<DateOnly?>(Constants.StartDateKey);
            if (stored is DateOnly d)
                _startDateTime = d.ToDateTime(TimeOnly.MinValue);

            _athlete = await AthleteSession.GetAndSetAsync();
            StateHasChanged();
        }
    }

    // Persist when the picker closes (user selected/changed the date)
    private async Task OnDatePickerClosed()
    {
        await SelectStartDate(_startDateTime is null ? null : DateOnly.FromDateTime(_startDateTime.Value));
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        _isLoading = true;
        _lastImportSummary = null;
        try
        {
            var file = e.File;
            using var stream = file.OpenReadStream();

            var workouts = await PlanningLoaderService.LoadPlanningAsync(stream);

            var planning = PlanningBuilder.BuildPlanning(DateOnly.FromDateTime(_startDateTime!.Value), workouts, _athlete);

            await localStorage.SetItemAsync(Constants.PlanningKey, planning);
            await localStorage.SetItemAsync(Constants.StartDateKey, DateOnly.FromDateTime(_startDateTime!.Value));

            var count = workouts?.Count() ?? 0;
            _lastImportSummary = $"Imported {count} workouts from “{file.Name}”.";
            Snackbar.Add(_lastImportSummary, Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to import: {ex.Message}", Severity.Error);
            _lastImportSummary = "Import failed.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectStartDate(DateOnly? date)
    {
        await localStorage.SetItemAsync(Constants.StartDateKey, date);
        if (date is not null)
            Snackbar.Add($"Start date saved: {date.Value:yyyy-MM-dd}", Severity.Info);
        else
            Snackbar.Add("Start date cleared", Severity.Warning);
    }
}