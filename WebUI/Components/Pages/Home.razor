@page "/"
@using WebUI.Components.Standalone.AthleteManagement
@using WebUI.Models
@using WebUI.Services.Interfaces
@inject IAthleteSession AthleteSession
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Athlete</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudText Typo="Typo.h3" Color="Color.Primary" Class="page-title mb-3">Athlete Management</MudText>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Paces">
            <AthletePaceComponent AthleteCreation="_athleteCreation"
                                  AthleteCreationChanged="OnAthleteCreationChanged" />
        </MudTabPanel>
        <MudTabPanel Text="Training Templates">
            <TemplateCreationComponent TrainingTemplates="_athlete.TrainingTemplates"
                                       TrainingTemplatesChanged="OnTrainingTemplatesChanged" />
        </MudTabPanel>
    </MudTabs>

    <MudStack Row="true" Class="mt-4" Spacing="2" AlignItems="AlignItems.Center">
        <MudButton Color="Color.Primary" Variant="Variant.Filled"
                   OnClick="SaveAthleteAsync" StartIcon="@Icons.Material.Filled.Save">
            Save Athlete
        </MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="ResetAsync"
                   StartIcon="@Icons.Material.Filled.Restore">
            Reset
        </MudButton>
        <MudSpacer />
        <MudButton Color="Color.Error" Variant="Variant.Outlined"
                   OnClick="ClearStorageAsync" StartIcon="@Icons.Material.Filled.DeleteForever">
            Clear Stored Data
        </MudButton>
    </MudStack>
</MudContainer>

@code {
    private Athlete _athlete = new();
    private AthleteCreation _athleteCreation = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var fromStorage = await AthleteSession.GetAndSetAsync();
            if (fromStorage is not null)
            {
                _athlete = fromStorage;
                _athleteCreation = new AthleteCreation(_athlete);
            }
            StateHasChanged();
        }
    }

    private void OnAthleteCreationChanged(AthleteCreation updatedCreation)
    {
        _athleteCreation = updatedCreation;
        // Update athlete paces immediately for real-time sync
        var tempAthlete = _athleteCreation.ToAthlete();
        _athlete.EasyPace = tempAthlete.EasyPace;
        _athlete.MarathonPace = tempAthlete.MarathonPace;
        _athlete.SemiMarathonPace = tempAthlete.SemiMarathonPace;
        _athlete.VmaPace = tempAthlete.VmaPace;
    }

    private void OnTrainingTemplatesChanged()
    {
        // Templates are modified directly on _athlete.TrainingTemplates
        // This callback just triggers UI refresh if needed
        StateHasChanged();
    }

    private async Task SaveAthleteAsync()
    {
        await AthleteSession.StoreAsync(_athlete);
        Snackbar.Add("Athlete saved successfully", Severity.Success);
    }

    private async Task ResetAsync()
    {
        var fromStorage = await AthleteSession.GetAndSetAsync();
        _athlete = fromStorage ?? new Athlete();
        _athleteCreation = new AthleteCreation(_athlete);
        Snackbar.Add("Form reset", Severity.Info);
        StateHasChanged();
    }

    private async Task ClearStorageAsync()
    {
        await AthleteSession.RemoveAsync();
        _athlete = new Athlete();
        _athleteCreation = new AthleteCreation();
        Snackbar.Add("Stored data cleared", Severity.Warning);
        StateHasChanged();
    }
}